<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.project.dao.TrainorderDAO">
  <resultMap id="BaseResultMap" type="com.company.project.model.Trainorder">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="ORDERID" jdbcType="VARCHAR" property="orderid" />
    <result column="ACCOUNTID" jdbcType="VARCHAR" property="accountid" />
    <result column="PASSENGERCARD" jdbcType="VARCHAR" property="passengercard" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="TRAINDATE" jdbcType="TIMESTAMP" property="traindate" />
    <result column="TRAINNUMBER" jdbcType="VARCHAR" property="trainnumber" />
    <result column="STARTORDER" jdbcType="NUMERIC" property="startorder" />
    <result column="ARRIVEORDER" jdbcType="NUMERIC" property="arriveorder" />
    <result column="PRICE" jdbcType="NUMERIC" property="price" />
    <result column="STATE" jdbcType="NUMERIC" property="state" />
    <result column="ORDERDATE" javaType="Date" property="ordertime"/>
  </resultMap>

  <select id="getOrderByTimeSQL" parameterType="com.company.project.model.Trainorder" resultType="Integer">
    select count(1) from Trainorder where STATE=#{state} and ORDERDATE=#{ordertime}
  </select>



  <!-- public List<Trainorder> findOrder(String accountid, Date start, Date end)-->
  <select id="findOrder"  resultType="com.company.project.model.OrderResult">
        select distinct o1.ORDERID, o1.NAME, o1.PASSENGERCARD, o1.TRAINDATE, o1.TRAINNUMBER, t1.STATION as startlocation, t2.STATION as arrivelocation, o1.PRICE, o1.STATE, o1.ORDERDATE
        from ( Trainorder o1 JOIN Time t1
              ON o1.TRAINNUMBER = t1.TRAINNUMBER and o1.STARTORDER = t1.STATIONORDER )
              ,
              ( Trainorder o2 JOIN Time  t2
              ON o2.TRAINNUMBER = t2.TRAINNUMBER and o2.ARRIVEORDER = t2.STATIONORDER )
        where o1.ACCOUNTID = #{accountid} and o2.ACCOUNTID = #{accountid} and o1.TRAINDATE <![CDATA[>=]]> #{start} and o1.TRAINDATE <![CDATA[<=]]> #{end} and o2.TRAINDATE <![CDATA[>=]]> #{start} and o2.TRAINDATE <![CDATA[<=]]> #{end}
  </select>

</mapper>